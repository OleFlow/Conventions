{
    "Class": {
        "prefix": "cl",
        "body": [
            "class ${1:ClassName}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "PHP Class block"
    },
	"Array": {
        "prefix": "arr",
        "body": [
            "[${1:value}, ${2:value}, $3];"
        ],
        "description": "Array [] block"
    },
    "If block": {
        "prefix": "if",
        "body": [
            "if (${1:condition}) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "If  block"
    },
    "If ... else": {
        "prefix": "ifelse",
        "body": [
            "if (${1:condition}) {",
            "\t${2:# code...}",
            "} else {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "If else block"
    },
    "If ... elseif ... else": {
        "prefix": "ifelif",
        "body": [
            "if (${1:condition}) {",
            "\t${2:# code...}",
            "} elseif (${3:condition}) {",
            "\t${4:# code...}",
            "} else {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "If elseif else block"
    },
    "Switch block": {
        "prefix": "sw",
        "body": [
            "switch (\\$${1:variable}) {",
            "\tcase '${2:label}':",
            "\t\t${3:# code...}",
            "\t\tbreak;",
            "\tcase '${4:label}':",
            "\t\t${5:# code...}",
            "\t\tbreak;$6",
            "\tdefault:",
            "\t\t${0:# code...}",
            "\t\tbreak;",
            "}"
        ],
        "description": "Switch block"
    },
    "Case statement": {
        "prefix": "cs",
        "body": [
            "case '${1:label}':",
            "\t${2:# code...}",
            "break;"
        ],
        "description": "Case addon block"
    },
    "Ternary operator": {
        "prefix": "tern",
        "body": [
            "${1:condition} ? ${2:if_true} : ${3:if_false};"
        ],
        "description": "Ternary statement"
    },
	"Try ... catch": {
        "prefix": "tryc",
        "body": [
            "try {",
            "\t${1:# code...}",
            "} catch (${2:\\Throwable} \\$${3:e}) {",
            "\t${4:# code...}",
            "}"
        ],
        "description": "Try catch block"
    },
    "Try ... catch ... finally": {
        "prefix": "tryf",
        "body": [
            "try {",
            "\t${1:# code...}",
            "} catch (${2:\\Throwable} \\$${3:e}) {",
            "\t${4:# code...}",
            "}$5 finally {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Try catch finally block"
    },
	"Catch": {
        "prefix": "cat",
        "body": [
            "catch (${1:\\Throwable} \\$${2:e}) {",
            "\t${3:# code...}",
            "}"
        ],
        "description": "Catch block"
    },
    "Finally": {
        "prefix": "fy",
        "body": [
            "finally {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Finally block"
    },
    "Throw new Exception": {
        "prefix": "thr",
        "body": [
            "throw new ${1:Some}Exception(\"${2:Error statement}\");"
        ],
        "description": "Throw new exception statement"
    },
	"Function": {
        "prefix": "func",
        "body": [
            "function ${1:func_name}(${2:Type} \\$${3:args}): ${4:void} {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Function block"
    },
	"Foreach loop": {
        "prefix": "fore",
        "body": [
            "foreach (\\$${1:iterable} as \\$${2:item}) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Foreach as $item block"
    },
    "Foreach ... key ... item": {
        "prefix": "forek",
        "body": [
            "foreach (\\$${1:iterable} as \\$${2:key} => \\$${3:item}) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Foreach as $key => $item block"
    },
    "Foreach ... end": {
        "prefix": "foren",
        "body": [
            "foreach (\\$${1:iterable} as \\$${2:item}):",
            "\t${0:# code...}",
            "endforeach;"
        ],
        "description": "Foreach end as $item block"
    },
    "Foreach ... key ... item ... end": {
        "prefix": "forenk",
        "body": [
            "foreach (\\$${1:iterable} as \\$${2:key} => \\$${3:item}):",
            "\t${0:# code...}",
            "endforeach;"
        ],
        "description": "Foreach end as $key => $item block"
    },
    "For loop": {
        "prefix": "forl",
        "body": [
            "for (\\$${1:i} = ${2:0}; \\$${1:i} < \\$${3:limit}; \\$${1:i}++) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "For loop"
    },
    "For ... end": {
        "prefix": "forlen",
        "body": [
            "for (\\$${1:i} = ${2:0}; \\$${1:i} < \\$${3:limit}; \\$${1:i}++):",
            "\t${0:# code...}",
            "endfor;"
        ],
        "description": "For end loop"
    },
    "While loop": {
        "prefix": "wl",
        "body": [
            "while (\\$${1:variable} ${2:<=} \\$${3:limit}) {",
            "\t${0:# code...}",
            "}"
        ],
        "description": "While loop"
    },
    "While ... end": {
        "prefix": "wlen",
        "body": [
            "while (\\$${1:variable} ${2:<=} \\$${3:limit}):",
            "\t${0:# code...}",
            "endwhile;"
        ],
        "description": "While end loop"
    },
    "Do ... while": {
        "prefix": "dowl",
        "body": [
            "do {",
            "\t${0:# code...}",
            "} while (\\$${1:variable} ${2:<=} \\$${3:limit});"
        ],
        "description": "Do while loop"
    },
	"Class constructor": {
        "prefix": "pubc",
        "body": [
            "public function __construct(${1:Type} \\$${2:args})",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Class public constructor block"
    },
    "Class private constructor": {
        "prefix": "pric",
        "body": [
            "private function __construct(${1:Type} \\$${2:args})",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Class private constructor block"
    },
    "Class protected constructor": {
        "prefix": "proc",
        "body": [
            "protected function __construct(${1:Type} \\$${2:args})",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Class protected constructor block"
    },
    "Private method": {
        "prefix": "prif",
        "body": [
            "private function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Private method block"
    },
    "Private static method": {
        "prefix": "prisf",
        "body": [
            "private static function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Private static method block"
    },
    "Final private method": {
        "prefix": "fprif",
        "body": [
            "final private function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Final private method block"
    },
    "Final private static method": {
        "prefix": "fprisf",
        "body": [
            "final private static function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Final private static method block"
    },
    "Protected method": {
        "prefix": "prof",
        "body": [
            "protected function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Protected method block"
    },
    "Protected static method": {
        "prefix": "prosf",
        "body": [
            "protected static function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Protected static method block"
    },
    "Final protected method": {
        "prefix": "fprof",
        "body": [
            "final protected function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Final protected method block"
    },
    "Final protected static method": {
        "prefix": "fprosf",
        "body": [
            "final protected static function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Final protected static method block"
    },
    "Abstract protected method": {
        "prefix": "aprof",
        "body": [
            "abstract protected function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void};"
        ],
        "description": "Abstract protected method statement"
    },
    "Abstract protected static method": {
        "prefix": "aprosf",
        "body": [
            "abstract protected static function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void};"
        ],
        "description": "Abstract protected static method statement"
    },
    "Public method": {
        "prefix": "pubf",
        "body": [
            "public function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Public method block"
    },
    "Public static method": {
        "prefix": "pubsf",
        "body": [
            "public static function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Public static method block"
    },
    "Final public method": {
        "prefix": "fpubf",
        "body": [
            "final public function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Final public method block"
    },
    "Final public static method": {
        "prefix": "fpubsf",
        "body": [
            "final public static function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void}",
            "{",
            "\t${0:# code...}",
            "}"
        ],
        "description": "Final public static method block"
    },
    "Abstract public method": {
        "prefix": "apubf",
        "body": [
            "abstract public function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void};"
        ],
        "description": "Abstract public method statement"
    },
    "Abstract public static method": {
        "prefix": "apubsf",
        "body": [
            "abstract public static function ${1:methodName}(${2:Type} \\$${3:args}): ${4:void};"
        ],
        "description": "Abstract public static method statement"
    },"define": {
        "prefix": "df",
        "body": [
            "define(\"${1:CONSTANT}\", \"${2:value}\");"
        ],
        "description": "'define' call"
    },
    "include": {
        "prefix": "inc",
        "body": [
            "include ${1:__DIR__.}'${2:path_to_filename}';"
        ],
        "description": "'include' statement"
    },
    "include_once": {
        "prefix": "inco",
        "body": [
            "include_once ${1:__DIR__.}'${2:path_to_filename}';"
        ],
        "description": "'include_once' statement"
    },
    "require": {
        "prefix": "rqr",
        "body": [
            "require ${1:__DIR__.}'${2:path_to_filename}';"
        ],
        "description": "'require' statement"
    },
    "require_once": {
        "prefix": "rqro",
        "body": [
            "require_once ${1:__DIR__.}'${2:path_to_filename}';"
        ],
        "description": "'require_once' statement"
    },
    "echo": {
        "prefix": "eco",
        "body": [
            "echo \"${1:text}\";"
        ],
        "description": "'echo' statement"
    },
    "print_r": {
        "prefix": "pr",
        "body": [
            "print_r(\\$${1:variable});"
        ],
        "description": "'print_r' call"
    },
    "var_dump": {
        "prefix": "vd",
        "body": [
            "var_dump(\\$${1:variable});"
        ],
        "description": "'var_dump' call"
    },
    "var_export": {
        "prefix": "vx",
        "body": [
            "var_export(\\$${1:variable});"
        ],
        "description": "'var_export' call"
    },
	"PHP tags": {
        "prefix": "php",
        "body": [
            "<?php $0?>"
        ],
        "description": "PHP open tag"
    },
    "PHP open tag": {
        "prefix": "po",
        "body": [
            "<?php"
        ],
        "description": "PHP open tag"
    },
    "PHP close tag": {
        "prefix": "pc",
        "body": [
            "?>"
        ],
        "description": "PHP close tag"
    },
    "PHP echo short tag": {
        "prefix": "peco",
        "body": [
            "<?= \\$${1:variable} ?>"
        ],
        "description": "PHP echo short tag"
    }
}
